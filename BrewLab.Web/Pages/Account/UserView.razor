@page "/account/view"
@inject AuthService authService
@inject ExperimenterService experimenterService
@inject NavigationManager navManager
@inject ISnackbar snackbar
@inject IDialogService dialogService

@if(CurrentExperimenter is not null)
{
    <MudForm @ref="Form" ValidationDelay="100" On>
        <MudStack Row=true Justify="Justify.Center">
            <MudPaper Width="70%">
                <MudStack Justify="Justify.Center" Class="pa-4">

                    <MudTextField T="string"
                                  Label="Login"
                                  Validation="@((string login) => ExperimenterDTO.ValidateUserName(login))"
                                  @bind-Value="CurrentExperimenter.UserName"
                                  @bind-Value:after='() => WasTouched = true'
                                  Immediate="true"
                                  Variant="Variant.Filled" />
                    <MudTextField T="string"
                                  Label="Email" Required="true"
                                  InputType="InputType.Email"
                                  @bind-Value="CurrentExperimenter.Email"
                                  @bind-Value:after='() => WasTouched = true'
                                  Immediate="true"
                                  Validation="@((string email) => ExperimenterDTO.ValidateEmail(email))"
                                  Variant="Variant.Filled" />
                    <MudTextField T="string"
                                  Label="Nome"
                                  Validation="@((string name) => ExperimenterDTO.ValidateName(name))"
                                  @bind-Value="CurrentExperimenter.Name"
                                  @bind-Value:after='() => WasTouched = true'
                                  Immediate="true"
                                  Variant="Variant.Filled" />
                    <MudTextField T="string"
                                  Label="Nova Senha"
                                  InputType="InputType.Password"
                                  @bind-Value="CurrentExperimenter.NewPassword"
                                  @bind-Value:after='() => WasTouched = true'
                                  Immediate="true"
                                  Validation="@((string password) => ExperimenterDTO.ValidatePassword(password))"
                                  Variant="Variant.Filled" />
                    <MudTextField T="string"
                                  Label="Repetir Nova Senha"
                                  InputType="InputType.Password"
                                  @bind-Value="CurrentExperimenter.NewPasswordRepeat"
                                  @bind-Value:after='() => WasTouched = true'
                                  Immediate="true"
                                  Validation="@((string password) => ExperimenterDTO.ValidateRepeatPassword(password, CurrentExperimenter.NewPasswordRepeat))"
                                  Variant="Variant.Filled" />
                    <MudDivider />
                    <MudTextField T="string"
                                  Label="Senha atual"
                                  InputType="InputType.Password"
                                  @bind-Value="CurrentExperimenter.CurrentPassword"
                                  @bind-Value:after='() => WasTouched = true'
                                  Immediate="true"
                                  Validation="@((string password) => ExperimenterDTO.ValidatePassword(password))"
                                  Variant="Variant.Filled"
                                  HelperText="Para editar seu perfil, digite sua senha." />

                    <div class="mt-2">
                        <MudButton Color="Color.Success" Variant="Variant.Filled" Disabled="!WasTouched" OnClick="UpdateAccountAsync">
                            Editar
                        </MudButton>
                        <MudButton Color="Color.Warning" Variant="Variant.Filled" Disabled="!WasTouched" OnClick="SetExperimenterASync">
                            Resetar
                        </MudButton>
                        <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="DeleteAccountAsync">
                            Desativar
                        </MudButton>
                    </div>

                </MudStack>
            </MudPaper>
        </MudStack>
            
    </MudForm>
        
}
else
{
    <Loading />
}

@code {
    private ExperimenterDTO.Account CurrentExperimenter { get; set; } = default!;
    private MudForm Form { get; set; } = default!;
    private bool WasTouched { get; set; } = false;

    protected async override Task OnInitializedAsync()
    {
        await SetExperimenterASync();
    }

    private async Task SetExperimenterASync()
    {
        var experimenter = await experimenterService.GetById(authService.User!.Id);

        if (experimenter is null) return;

        CurrentExperimenter = experimenter;
        CurrentExperimenter.NewPassword = "";
        CurrentExperimenter.NewPasswordRepeat = "";
        WasTouched = false;
    }

    private async Task UpdateAccountAsync()
    {
        var result = await experimenterService.AttemptUpdate(CurrentExperimenter);

        if (result != ResultDTO.Result.Succeeded)
        {
            snackbar.Add(result.Errors.FirstOrDefault(), Severity.Error);
            return;
        }

        snackbar.Add("Dados alterados com sucesso!", Severity.Success);
        navManager.NavigateTo("/");
    }

    private async Task DeleteAccountAsync()
    {
        var parameters = new DialogParameters<AccountDeactivateDialog>
        {
            { x => x.Password, CurrentExperimenter.CurrentPassword },
        };

        var options = new DialogOptions() { MaxWidth = MaxWidth.Medium, CloseOnEscapeKey = true, BackdropClick = true };

        await dialogService.ShowAsync<AccountDeactivateDialog>("Desativação de conta", parameters, options);
    }
}
