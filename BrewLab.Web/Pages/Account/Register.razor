@page "/register"
@using System.ComponentModel.DataAnnotations
@inject ExperimenterService experimenterService
@inject NavigationManager navigation

<MudPaper Class="pa-4">
    <MudForm @ref="Form" @bind-IsValid="IsValid" Spacing="0">
        @foreach(var error in Errors)
        {
            <MudText Color="Color.Error" Class="mv-1">@error</MudText>
        }

        <MudTextField T="string"
                        Label="Login"
                        Validation="@((string login) => ExperimenterDTO.ValidateUserName(login))"
                        @bind-Value="Experimenter.UserName"
                        Variant="Variant.Filled"/>
        <MudTextField T="string"
                        Label="Email" Required="true"
                        InputType="InputType.Email"
                        @bind-Value="Experimenter.Email"
                        Validation="@((string email) => ExperimenterDTO.ValidateEmail(email))"
                        Variant="Variant.Filled" />
        <MudTextField T="string"
                        Label="Nome"
                        Validation="@((string name) => ExperimenterDTO.ValidateName(name))"
                        @bind-Value="Experimenter.Name"
                        Variant="Variant.Filled" />
        <MudTextField T="string"
                        Label="Senha"
                        InputType="InputType.Password"
                        @bind-Value="Experimenter.Password"
                        Validation="@((string password) => ExperimenterDTO.ValidatePassword(password))"
                        Variant="Variant.Filled" />
        <MudTextField T="string"
                        Label="Senha"
                        InputType="InputType.Password"
                        @bind-Value="Experimenter.RepeatPassword"
                        Validation="@((string repeatPassword) => ExperimenterDTO.ValidateRepeatPassword(Experimenter.Password, repeatPassword))"
                        Variant="Variant.Filled" />

        <div class="mt-4">
            <MudButton OnClick="RegisterAsync"
                Variant="Variant.Filled" 
                Color="Color.Primary">Registrar</MudButton>
        </div>
            
    </MudForm>
</MudPaper>


@code {
    private MudForm Form { get; set; }
    private bool IsValid { get; set; }
    private ExperimenterDTO.Register Experimenter { get; set; } = new();
    private IEnumerable<string> Errors { get; set; } = [];

    private async Task RegisterAsync(MouseEventArgs _)
    {
        if (!Experimenter.Validate())
        {
            await Form.Validate();
            return;
        }

        var result = await experimenterService.Register(Experimenter);

        if (result.Success)
        {
            navigation.NavigateTo("/");
        }
        else
        {
            Errors = result.Errors.Select(e => e.Description);
        }
    }
}
