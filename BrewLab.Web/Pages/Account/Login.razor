@page "/account/login"
@inject AuthService authService
@inject NavigationManager navigation
@attribute [AllowAnonymous]



<MudPaper Class="pa-4">
    <MudForm @ref="Form" @bind-IsValid="IsValid" Spacing="0" >

        <MudTextField T="string"
                      Label="Login"
                      @bind-Value="Experimenter.UserName"
                      Variant="Variant.Filled" />
        <MudTextField T="string"
                      Label="Senha"
                      InputType="InputType.Password"
                      @bind-Value="Experimenter.Password"
                      Validation="@((string password) => ExperimenterDTO.ValidatePassword(password))"
                      Variant="Variant.Filled" />

        @foreach (var error in Errors)
        {
            <MudText Color="Color.Error">@error</MudText>
        }
        <div class="mt-4">
            <MudButton @onclick="LoginAsync"
                       Variant="Variant.Filled"
                       Color="Color.Primary">Login
            </MudButton>
        </div>
        <div class="mt-2">
            <MudLink Href="/account/register">Ou cadastre-se no lugar.</MudLink>
        </div>

    </MudForm>
</MudPaper>

@code {
    private MudForm Form { get; set; } = default!;
    private bool IsValid { get; set; }
    private ExperimenterDTO.Login Experimenter { get; set; } = new();

    private IEnumerable<string> Errors { get; set; } = [];

    private async Task LoginAsync()
    {
        if (!IsValid)
        {
            await Form.Validate();
            return;
        }

        var result = await authService.Login(Experimenter);

        Errors = result.Errors;

        if (result.Success)
        {
            await authService.SetTokenLocalStorage(result.Token!);
            navigation.NavigateTo("/");
        }
        
    }
}
