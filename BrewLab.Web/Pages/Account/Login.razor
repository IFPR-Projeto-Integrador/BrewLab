@page "/login"
@inject AuthService authService
@inject NavigationManager navigation

<MudPaper Class="pa-4">
    <MudForm @ref="Form" @bind-IsValid="IsValid" Spacing="0" >

        <MudTextField T="string"
                      Label="Login"
                      @bind-Value="Experimenter.UserName"
                      Variant="Variant.Filled" />
        <MudTextField T="string"
                      Label="Senha"
                      InputType="InputType.Password"
                      @bind-Value="Experimenter.Password"
                      Validation="@((string password) => ExperimenterDTO.ValidatePassword(password))"
                      Variant="Variant.Filled" />

        <div class="mt-4">
            <MudButton @onclick="LoginAsync"
                       Variant="Variant.Filled"
                       Color="Color.Primary">Login
            </MudButton>
        </div>

    </MudForm>
</MudPaper>

<p>Token: @Token</p>
<p>Username: @Username</p>
<p>Id: @Id</p>

@code {
    private MudForm Form { get; set; }
    private bool IsValid { get; set; }
    private ExperimenterDTO.Login Experimenter { get; set; } = new();

    private string Username { get; set; } = "";
    private int Id { get; set; } = 0;
    private string Token { get; set; } = "";

    private async Task LoginAsync()
    {
        if (!IsValid)
        {
            await Form.Validate();
            return;
        }

            Token = Common.JWT.Token.GenerateToken(new ExperimenterDTO.NameAndId { Id = int.Parse(Experimenter.Password), UserName = Experimenter.UserName });
        var result = await Common.JWT.Token.ReadToken(Token);
        if (result is null) return;
        Username = result.UserName;
        Id = result.Id;
    }
}
