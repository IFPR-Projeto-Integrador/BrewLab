@page "/account/passwordReset/{Jwt}"
@layout LoginLayout
@inject NavigationManager navigation
@inject ExperimenterService experimenterService
@inject ISnackbar snackbar
@attribute [AllowAnonymous]

<MainForm @ref="Form" Width="20%">
    <MudTextField T="string"
                  Label="Nova Senha"
                  InputType="InputType.Password"
                  @bind-Value="NovaSenha"
                  Immediate="true"
                  Validation="@((string password) => ExperimenterDTO.ValidatePassword(password))"
                  Variant="Variant.Filled" />
    <MudTextField T="string"
                  Label="Repetir Nova Senha"
                  InputType="InputType.Password"
                  @bind-Value="RepetirNovaSenha"
                  Immediate="true"
                  Validation="@((string password) => ExperimenterDTO.ValidateRepeatPassword(password, RepetirNovaSenha))"
                  Variant="Variant.Filled" />

    <MudButton Class="mt-3" @onclick="ResetPasswordAsync"
                Variant="Variant.Filled"
                Color="Color.Primary"
                FullWidth="true">
        Confirmar nova senha
    </MudButton>
</MainForm>

@code {
    private MainForm Form { get; set; } = default!;
    private ExperimenterDTO.NameAndId? Usuario;
    private string NovaSenha { get; set; } = "";
    private string RepetirNovaSenha { get; set; } = "";

    [Parameter]
    public string Jwt { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        var info = await Token.ReadToken(Jwt);

        if (info is null)
        {
            ReturnToLogin();
            return;
        }

        this.Usuario = info;
    }

    private async Task ResetPasswordAsync()
    {
        if (!Form.Validate()) return;

        if (this.Usuario is null)
        {
            ReturnToLogin();
            return;
        }

        var result = await experimenterService.RedefinePasswordAsync(NovaSenha, RepetirNovaSenha, this.Usuario.Id);

        if (result.Success)
        {
            snackbar.Add("Senha redefinida com sucesso. Tente logar novamente.", Severity.Success);
            navigation.NavigateTo("/account/login");
        }
        else
        {
            Form.AddErrors(result.Errors);
        }
    }

    private void ReturnToLogin()
    {
        snackbar.Add("Pedido de recuperação de senha inválido ou expirado. Por favor, tente novamente.", Severity.Error);
        navigation.NavigateTo("/account/login");
    }
}
