@page "/account/passwordReset/{Jwt}"
@inject NavigationManager navigation
@inject ExperimenterService experimenterService
@inject ISnackbar snackbar
@attribute [AllowAnonymous]

<MudStack Row="true" Justify="Justify.Center">
    <MudPaper Width="70%" Class="pa-4">
        <MudForm @ref="Form" @bind-IsValid="IsValid" Spacing="0">

            <MudTextField T="string"
                          Label="Nova Senha"
                          InputType="InputType.Password"
                          @bind-Value="NovaSenha"
                          Immediate="true"
                          Validation="@((string password) => ExperimenterDTO.ValidatePassword(password))"
                          Variant="Variant.Filled" />
            <MudTextField T="string"
                          Label="Repetir Nova Senha"
                          InputType="InputType.Password"
                          @bind-Value="RepetirNovaSenha"
                          Immediate="true"
                          Validation="@((string password) => ExperimenterDTO.ValidateRepeatPassword(password, RepetirNovaSenha))"
                          Variant="Variant.Filled" />

            <div class="mt-4">
                <MudButton @onclick="ResetPasswordAsync"
                           Variant="Variant.Filled"
                           Color="Color.Primary">
                    Resetar Senha
                </MudButton>
            </div>

        </MudForm>
    </MudPaper>
</MudStack>

@code {
    private MudForm Form { get; set; } = default!;
    private ExperimenterDTO.NameAndId? Usuario;
    private bool IsValid { get; set; }
    private string NovaSenha { get; set; } = "";
    private string RepetirNovaSenha { get; set; } = "";

    [Parameter]
    public string Jwt { get; set; } = "";

    protected override async Task OnParametersSetAsync()
    {
        var info = await Token.ReadToken(Jwt);

        if (info is null)
        {
            ReturnToLogin();
            return;
        }


        this.Usuario = info;
    }

    private async Task ResetPasswordAsync()
    {
        if (this.Usuario is null)
        {
            ReturnToLogin();
            return;
        }

        if (!this.IsValid)
        {
            snackbar.Add("Algo está de errado no formulário. Verifique e tente novamente.", Severity.Error);
        }

        var result = await experimenterService.RedefinePasswordAsync(NovaSenha, RepetirNovaSenha, this.Usuario.Id);

        if (result.Success)
        {
            snackbar.Add("Senha redefinida com sucesso. Tente logar novamente.", Severity.Success);
            navigation.NavigateTo("/account/login");
        }
        else
        {
            snackbar.Add(result.Errors.FirstOrDefault(), Severity.Error);
        }
    }

    private void ReturnToLogin()
    {
        snackbar.Add("Pedido de recuperação de senha inválido ou expirado. Por favor, tente novamente.", Severity.Error);
        navigation.NavigateTo("/account/login");
    }
}
