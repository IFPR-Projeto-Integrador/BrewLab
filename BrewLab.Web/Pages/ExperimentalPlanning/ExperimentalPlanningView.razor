@page "/experimentalPlanning/view/{Action}/{Id:int}"
@using System.Text.Json
@inject ExperimentalPlanningService experimentalPlanningService
@inject ExperimentalModelService experimentalModelService
@inject ModalService modalService
@inject ISnackbar snackbar
@inject NavigationManager navigation
@inject AuthService authService

@if (!Errored)
{
    if (ExperimentalPlanning is not null)
    {
        <MainForm @ref="Form">
            <MudTextField T="string"
                          Label="Nome"
                          @bind-Value="ExperimentalPlanning.Name"
                          Validation="@((string name) => ExperimentalPlanningDTO.ValidateName(name))"
                          Variant="Variant.Filled"
                          ReadOnly="@AType.IsVisualizationOnly()" />

            <MudTextField T="string"
                          Label="Descrição"
                          @bind-Value="ExperimentalPlanning.Description"
                          Validation="@((string description) => ExperimentalPlanningDTO.ValidateDescription(description))"
                          Variant="Variant.Filled"
                          Lines="5"
                          ReadOnly="@AType.IsVisualizationOnly()" />

            <MudSelect T="int?"
                       Label="Modelo base"
                       @bind-Value="ExperimentalPlanning.IdExperimentalModel"
                       Required="true"
                       RequiredError="Modelo base é obrigatório."
                       ReadOnly="@AType.IsVisualizationOnly()">
                @foreach (var model in ModelsDisplay)
                {
                    <MudSelectItem T="int?" Value="model.Id">@(model.Id) - @(model.Name)</MudSelectItem>
                }
            </MudSelect>

            <MudStack Row="true" Class="mt-2">
                <MudButton FullWidth="true" Color="Color.Primary" OnClick="OpenDialogAsync" Variant="Variant.Filled"
                           Disabled="@(ExperimentalMatrixFile is null && string.IsNullOrWhiteSpace(ExperimentalPlanning.ExperimentalMatrix))">
                    Visualizar matriz experimental
                </MudButton>
                <MudFileUpload T="IBrowserFile" FilesChanged="FileChanged"
                               Accept=".json"
                               Disabled="@(ExperimentalMatrixFile is not null
                                                    || !string.IsNullOrWhiteSpace(ExperimentalPlanning.ExperimentalMatrix)
                                                    || AType.IsVisualizationOnly())">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Success"
                                   StartIcon="@Icons.Material.Rounded.CloudUpload"
                                   Disabled="@(ExperimentalMatrixFile is not null
                                                    || !string.IsNullOrWhiteSpace(ExperimentalPlanning.ExperimentalMatrix)
                                                    || AType.IsVisualizationOnly())">
                            Enviar
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Error"
                           StartIcon="@Icons.Material.Rounded.AttachFile"
                           OnClick="async () => await FileChanged(null)"
                           Disabled="@(ExperimentalMatrixFile is null
                                            || string.IsNullOrWhiteSpace(ExperimentalPlanning.ExperimentalMatrix)
                                            || AType.IsVisualizationOnly())">
                    Cancelar
                </MudButton>
            </MudStack>


            <div class="mt-2">
                @if (AType == ActionType.Create)
                {
                    <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="RegisterAsync">
                        Cadastrar
                    </MudButton>
                }
                @if (AType == ActionType.Delete)
                {
                    <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="DeleteAsync">
                        Deletar
                    </MudButton>
                }
            </div>
        </MainForm>

    }
    else
    {
        <Loading />
    }
}
else
{
    <MudStack Row="true" Justify="Justify.Center">
        <MudText>@Message</MudText>
    </MudStack>
}





@code {
    private ActionType AType { get; set; }
    private ExperimentalPlanningDTO.View ExperimentalPlanning { get; set; } = default!;

    private bool Errored { get; set; } = false;
    private string Message { get; set; } = "";
    private MainForm Form { get; set; } = default!;

    private IEnumerable<ExperimentalModelDTO.View> ModelsDisplay { get; set; } = default!;

    private IBrowserFile? ExperimentalMatrixFile { get; set; }

    [Parameter]
    public string Action { get; set; } = "";
    [Parameter]
    public int Id { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        if (authService.User is null)
        {
            Errored = true;
            Message = "Você não está mais logado. Por favor recarregue a página.";
            return;
        }

        AType = Action.ToActionType();

        AType = AType == ActionType.Edit ? ActionType.View : AType;

        if (AType == ActionType.Create)
        {
            ExperimentalPlanning = new ExperimentalPlanningDTO.View();
            ModelsDisplay = experimentalModelService.GetExperimentalModelsByExperimenterId(authService.User.Id)!;
            return;
        }

        var experimentalPlanning = await experimentalPlanningService.GetExperimentalPlanningById(Id, authService.User.Id);

        if (experimentalPlanning is null)
        {
            Errored = true;
            Message = "Planejamento experimental não encontrado.";
            return;
        }

        ExperimentalPlanning = experimentalPlanning;

        ModelsDisplay = experimentalModelService.GetExperimentalModelsByExperimenterId(authService.User.Id)!;
    }

    private async Task OpenDialogAsync()
    {
        await modalService
            .ViewOnly()
            .Optional()
            .ScreenSize()
            .DisplayViewAsync(ExperimentalPlanning.ExperimentalMatrix, "Matriz");
    }

    private async Task RegisterAsync()
    {
        if (!Form.Validate()) return;

        if (authService.User is null)
        {
            Errored = true;
            Message = "Você não está mais logado. Por favor recarregue a página.";
            return;
        }

        var toCreate = new ExperimentalPlanningDTO.Create
            {
                Name = ExperimentalPlanning.Name,
                ExperimentalMatrix = ExperimentalPlanning.ExperimentalMatrix,
                Description = ExperimentalPlanning.Description,
                IdExperimentalModel = ExperimentalPlanning.IdExperimentalModel!.Value
            };

        var result = await experimentalPlanningService.CreateExperimentalPlanning(toCreate);

        if (result.Success)
        {
            snackbar.Add("Planejamento experimental criado com sucesso!", Severity.Success);
            navigation.NavigateTo("/experimentalPlanning/index");
        }
        else
        {
            Form.AddErrors(result.Errors);
        }
    }

    private async Task DeleteAsync()
    {
        if (authService.User is null)
        {
            Errored = true;
            Message = "Você não está mais logado. Por favor recarregue a página.";
            return;
        }

        var result = await experimentalPlanningService.DeleteExperimentalPlanning(Id, authService.User.Id);

        if (result.Success)
        {
            snackbar.Add("Planejamento experimental deletado com sucesso!", Severity.Success);
            navigation.NavigateTo("/experimentalPlanning/index");
        }
        else
        {
            Form.AddErrors(result.Errors);
        }
    }

    private async Task FileChanged(IBrowserFile? file = null)
    {
        ExperimentalMatrixFile = file;

        if (ExperimentalMatrixFile is null)
        {
            ExperimentalPlanning.ExperimentalMatrix = "";
            return;    
        }

        var stream = ExperimentalMatrixFile.OpenReadStream();
        using var ms = new StreamReader(stream);
        var json = await ms.ReadToEndAsync();

        ExperimentalPlanning.ExperimentalMatrix = json;
    }
}
