@page "/experimentalPlanning/index"
@inject ExperimentalPlanningService experimentalPlanningService
@inject ExperimentService experimentService
@inject AuthService authService
@inject ModalService modalService
@inject ISnackbar snackbar

<MudPaper Width="100%">
    @if (ExperimentalPlannings is not null)
    {
        <MudTable     Items="@ExperimentalPlannings" 
                      AllowUnsorted="true"
                      Hover="true"
                      Breakpoint="Breakpoint.Sm"
                      Loading="@Loading"
                      LoadingProgressColor="Color.Info"
                      Filter="new Func<ExperimentalPlanningDTO.ViewWithExperimentalModels, bool>(FilterWrapper)">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Planejamentos Experimentais</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="SearchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="(ExperimentalPlanningDTO.ViewWithExperimentalModels x) => x.Id"><b>Id</b></MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="(ExperimentalPlanningDTO.ViewWithExperimentalModels x) => x.Name"><b>Nome</b></MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="(ExperimentalPlanningDTO.ViewWithExperimentalModels x) => x.ExperimentalMatrix"><b>Planejamento experimental</b></MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="@((ExperimentalPlanningDTO.ViewWithExperimentalModels x) => x.Experiments?.Count() ?? 0)"><b>Experimentos</b></MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="@((ExperimentalPlanningDTO.ViewWithExperimentalModels x) => x.ExperimentalModel?.Name ?? "")"><b>Modelo base</b></MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="(ExperimentalPlanningDTO.ViewWithExperimentalModels x) => x.Description"><b>Descrição</b></MudTableSortLabel></MudTh>
                <MudTh Style="text-align: center; width: 10%"><b>Ações</b></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Nome">@context.Name</MudTd>
                <MudTd DataLabel="Matriz experimental">
                    <MudButton Variant="Variant.Text"
                               Color="Color.Info"
                               OnClick="@(() => OpenModelAsync(@context.ExperimentalMatrix))">Visualizar planejamento experimental</MudButton>
                </MudTd>
                <MudTd>
                    @if (context.Experiments is null || context.Experiments?.Count() == 0)
                    {
                        <MudButton Variant="Variant.Text"
                                   Color="Color.Success"
                                   OnClick="@(async () => await Parse(context.Id))">Gerar Experimentos</MudButton>
                    }
                    else
                    {
                        <MudButton Variant="Variant.Text"
                                   Color="Color.Info"
                                   OnClick="@(() => ShowExperiments(context.Id))">
                                   @(context.ShowExperiments ? "Fechar Experimentos" : "Visualizar Experimentos")
                        </MudButton>
                    }

                </MudTd>
                <MudTd DataLabel="Modelo base">@(context.ExperimentalModel?.Name ?? "Erro")</MudTd>
                <MudTd DataLabel="Descrição">@context.Description</MudTd>
                <MudTd DataLabel="Ações" Style="text-align: center">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Primary" Size="Size.Medium"
                             AriaLabel="Abrir menu de ações">
                        <MudMenuItem Href="@($"/experimentalPlanning/view/view/{context.Id}")"
                                     Icon="@Icons.Material.Rounded.RemoveRedEye" IconColor="Color.Info" A>Visualizar</MudMenuItem>
                        <MudMenuItem Href="@($"/experimentalPlanning/view/delete/{context.Id}")"
                                     Icon="@Icons.Material.Rounded.Cancel" IconColor="Color.Error">Deletar</MudMenuItem>
                    </MudMenu>
                </MudTd>
            </RowTemplate>
            <ChildRowContent>
                @if (context.ShowExperiments)
                {
                    <MudTr>
                        <td colspan="7" style="padding: 1rem 3rem 1rem 3rem; border: 1px solid gray">
                            <MudCard Elevation="0">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.body1">Experimentos do planejamento: <strong>@context.Name</strong></MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent Class="pa-0">
                                    <MudTable Items="@context.Experiments" Context="ExperimentContext" Hover="true" Breakpoint="Breakpoint.Sm" Elevation="0">
                                        <ColGroup>
                                            <col style="width: 10%;"/>
                                            <col style="width: 90%;"/>
                                        </ColGroup>
                                        <HeaderContent>
                                            <MudTh>Id</MudTh>
                                            <MudTh Style="text-align: center;">Visualizar Experimento</MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd DataLabel="Id">@ExperimentContext.Id</MudTd>
                                            <MudTd DataLabel="Visualizar Experimento" Style="text-align: center;">
                                                <MudButton Variant="Variant.Text"
                                                           Color="Color.Info"
                                                           OnClick="@(() => OpenModelAsync(ExperimentContext.ParsedModel))">Visualizar Experimento</MudButton>
                                            </MudTd>
                                        </RowTemplate>
                                    </MudTable>
                                </MudCardContent>
                            </MudCard>
                        </td>
                    </MudTr>
                }
                
            </ChildRowContent>
        </MudTable>
    }
    else
    {
        <Loading />
    }

</MudPaper>

@code {

    private List<ExperimentalPlanningDTO.ViewWithExperimentalModels>? ExperimentalPlannings { get; set; }
    private bool Loading { get; set; } = true;
    private string SearchString { get; set; } = "";

    protected override async Task OnInitializedAsync()
    {
        Loading = true;

        if (authService.User is null) return;

        var result = await experimentalPlanningService.GetExperimentalPlanningsByExperimenterIdAsync(authService.User.Id);

        if (result is not null) ExperimentalPlannings = result.ToList();

        Loading = false;
    }

    private async Task OpenModelAsync(string planningJson)
    {
        await modalService
            .Optional()
            .ScreenSize()
            .ViewOnly()
            .DisplayViewAsync(planningJson, "Matriz");
    }

    private void ShowExperiments(int id)
    {
        var experiment = ExperimentalPlannings?.FirstOrDefault(ep => ep.Id == id);

        if (experiment is null) return;

        experiment.ShowExperiments = !experiment.ShowExperiments;
    }

    private async Task Parse(int experimentalPlanningId)
    {
        if (authService.User is null) return;

        var resultExperiment = await experimentService.Create(experimentalPlanningId, authService.User.Id);

        if (!resultExperiment.Success)
        {
            snackbar.Add(resultExperiment.Errors.FirstOrDefault(), Severity.Error);
            return;
        }

        var planning = await experimentalPlanningService.GetExperimentalPlanningById(experimentalPlanningId, authService.User.Id);

        if (planning is null || ExperimentalPlannings is null) return;

        var elementIndex = ExperimentalPlannings.FindIndex(e => e.Id == planning.Id);

        ExperimentalPlannings[elementIndex] = planning;
    }

    private bool FilterWrapper(ExperimentalPlanningDTO.ViewWithExperimentalModels view) => Filter(view, SearchString);

    private bool Filter(ExperimentalPlanningDTO.ViewWithExperimentalModels view, string searchString)
    {
        if (view is null) return false;
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (view.Name.Contains(SearchString)) return true;
        if (view.ExperimentalMatrix.Contains(SearchString)) return true;
        if (view.Description.Contains(SearchString)) return true;
        if (view.ExperimentalModel?.Name.Contains(SearchString) ?? false) return true;

        return false;
    }
}
