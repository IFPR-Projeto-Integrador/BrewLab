@page "/experimentalModel/view/{Action}/{Id:int}"
@inject ExperimentalModelService experimentalModelService
@inject ModalService modalService
@inject ISnackbar snackbar
@inject NavigationManager navigation
@inject AuthService authService

@if (!Errored)
{
    if(ExperimentalModel is not null)
    {
        <MainForm @ref="Form">
            <MudTextField T="string"
                          Label="Nome"
                          @bind-Value="ExperimentalModel.Name"
                          Validation="@((string name) => ExperimentalModelDTO.ValidateName(name))"
                          Variant="Variant.Filled"
                          ReadOnly="@AType.IsVisualizationOnly()" />

            <MudTextField T="string"
                          Label="Descrição"
                          @bind-Value="ExperimentalModel.Description"
                          Validation="@((string description) => ExperimentalModelDTO.ValidateDescription(description))"
                          Variant="Variant.Filled"
                          Lines="5"
                          ReadOnly="@AType.IsVisualizationOnly()" />

            <MudButton FullWidth="true" Color="Color.Primary" OnClick="OpenDialogAsync" Variant="Variant.Filled" Class="mt-2">
                @(AType.IsVisualizationOnly() ? "Visualizar" : "Editar") modelo
            </MudButton>

            <div class="mt-2">
                @if (AType == ActionType.Create)
                {
                    <MudButton Color="Color.Success" Variant="Variant.Filled" OnClick="RegisterAsync">
                        Cadastrar
                    </MudButton>
                }
                @if (AType == ActionType.Edit)
                {
                    <MudButton Color="Color.Warning" Variant="Variant.Filled" OnClick="EditAsync">
                        Editar
                    </MudButton>
                }
                @if (AType == ActionType.Delete)
                {
                    <MudButton Color="Color.Error" Variant="Variant.Filled" OnClick="DeleteAsync">
                        Deletar
                    </MudButton>
                }
            </div>
        </MainForm>
        
    }
    else
    {
        <Loading />
    }
}
else
{
    <MudStack Row="true" Justify="Justify.Center">
        <MudText>@Message</MudText>
    </MudStack>
}





@code {
    private ActionType AType { get; set; }
    private ExperimentalModelDTO.View ExperimentalModel { get; set; } = default!;
    private bool Errored { get; set; } = false;
    private string Message { get; set; } = "";
    private MainForm Form { get; set; } = default!;

    [Parameter]
    public string Action { get; set; } = "";
    [Parameter]
    public int Id { get; set; } = 0;
    [SupplyParameterFromQuery]
    public int? CopyFrom { get; set; } = null;

    protected override async Task OnInitializedAsync()
    {
        if (authService.User is null)
        {
            Errored = true;
            Message = "Você não está mais logado. Por favor recarregue a página.";
            return;
        }

        AType = Action.ToActionType();

        if (AType == ActionType.Create)
        {
            if (CopyFrom is not null)
            {
                Id = CopyFrom.Value;

                var queryExperimentalModel = await experimentalModelService.GetExperimentalModelById(Id, authService.User.Id);

                if (queryExperimentalModel is not null)
                {
                    ExperimentalModel = queryExperimentalModel;
                }
                else
                {
                    snackbar.Add("Modelo para cópia é inválido ou não existe.", Severity.Error);
                    ExperimentalModel = new ExperimentalModelDTO.View();
                }
            }
            else
            {
                ExperimentalModel = new ExperimentalModelDTO.View();
            }

            return;
        }

        var experimentalModel = await experimentalModelService.GetExperimentalModelById(Id, authService.User.Id);

        if (experimentalModel is null)
        {
            Errored = true;
            Message = "Modelo experimental não encontrado.";
            return;
        }

        ExperimentalModel = experimentalModel;
    }

    private async Task OpenDialogAsync()
    {
        var result = await modalService
        .CanEdit()
        .ScreenSize()
        .Required()
        .DisplayViewAsync(ExperimentalModel.Model, "Modelo") ?? "";

        ExperimentalModel.Model = result;
    }


    private async Task RegisterAsync()
    {
        if (!Form.Validate()) return;

        if (authService.User is null)
        {
            Errored = true;
            Message = "Você não está mais logado. Por favor recarregue a página.";
            return;
        }

        var toCreate = new ExperimentalModelDTO.Create
        {
            Name = ExperimentalModel.Name,
            Model = ExperimentalModel.Model,
            Description = ExperimentalModel.Description,
            ExperimenterId = authService.User.Id
        };

        var result = await experimentalModelService.CreateExperimentalModel(toCreate);

        if (result.Success)
        {
            snackbar.Add("Experimento modelo criado com sucesso!", Severity.Success);
            navigation.NavigateTo("/experimentalModel/index");
        }
        else
        {
            Form.AddErrors(result.Errors);
        }
    }

    private async Task EditAsync()
    {
        if (authService.User is null)
        {
            Errored = true;
            Message = "Você não está mais logado. Por favor recarregue a página.";
            return;
        }

        var toEdit = new ExperimentalModelDTO.Edit
            {
                Id = ExperimentalModel.Id,
                Name = ExperimentalModel.Name,
                Model = ExperimentalModel.Model,
                Description = ExperimentalModel.Description,
                ExperimenterId = authService.User.Id
            };

        var result = await experimentalModelService.EditExperimentalModel(toEdit);

        if (result.Success)
        {
            snackbar.Add("Experimento modelo editado com sucesso!", Severity.Success);
            navigation.NavigateTo("/experimentalModel/index");
        }
        else
        {
            foreach (var error in result.Errors)
            {
                snackbar.Add(error, Severity.Error);
            }
        }
    }

    private async Task DeleteAsync()
    {
        if (!Form.Validate()) return;

        if (authService.User is null)
        {
            Errored = true;
            Message = "Você não está mais logado. Por favor recarregue a página.";
            return;
        }

        var result = await experimentalModelService.DeleteExperimentalModel(Id, authService.User.Id);

        if (result.Success)
        {
            snackbar.Add("Experimento modelo deletado com sucesso!", Severity.Success);
            navigation.NavigateTo("/experimentalModel/index");
        }
        else
        {
            Form.AddErrors(result.Errors);
        }
    }
}
