@page "/experimentalModel/index"
@inject ExperimentalModelService experimentalModelService
@inject AuthService authService
@inject ModalService modalService

<MudPaper Width="100%">
    @if (ExperimentalModels is not null)
    {
        <MudTable   Items="@ExperimentalModels"
                    Hover="true" 
                    Breakpoint="Breakpoint.Sm" 
                    Loading="@Loading" 
                    LoadingProgressColor="Color.Info"
                    Filter="new Func<ExperimentalModelDTO.View, bool>(FilterWrapper)" 
                    AllowUnsorted="true">

            <ToolBarContent>
                <MudText Typo="Typo.h6">Modelos Experimentais</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="SearchString" Placeholder="Buscar" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="(ExperimentalModelDTO.View x) => x.Id"><b>Id</b></MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="(ExperimentalModelDTO.View x) => x.Name"><b>Nome</b></MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="(ExperimentalModelDTO.View x) => x.Model"><b>Modelo</b></MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="(ExperimentalModelDTO.View x) => x.Description"><b>Descrição</b></MudTableSortLabel></MudTh>
                <MudTh Style="text-align: center; width: 10%"><b>Ações</b></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Nome">@context.Name</MudTd>
                <MudTd DataLabel="Modelo">
                    <MudButton Variant="Variant.Text" 
                        Color="Color.Info" 
                        OnClick="@(() => OpenModelAsync(@context.Model))">Visualizar modelo</MudButton>
                </MudTd>
                <MudTd DataLabel="Descrição">@context.Description</MudTd>
                <MudTd DataLabel="Ações" Style="text-align: center">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Primary" Size="Size.Medium"
                             AriaLabel="Abrir menu de ações">
                        <MudMenuItem Href="@($"/experimentalModel/view/view/{context.Id}")" 
                            Icon="@Icons.Material.Rounded.RemoveRedEye" IconColor="Color.Info" A>Visualizar</MudMenuItem>
                        <MudMenuItem Href="@($"/experimentalModel/view/edit/{context.Id}")"
                            Icon="@Icons.Material.Rounded.EditNote" IconColor="Color.Warning">Editar</MudMenuItem>
                        <MudMenuItem Href="@($"/experimentalModel/view/create/0?CopyFrom={context.Id}")"
                                     Icon="@Icons.Material.Rounded.FileCopy" IconColor="Color.Warning">Copiar</MudMenuItem>
                        <MudMenuItem Href="@($"/experimentalModel/view/delete/{context.Id}")"
                            Icon="@Icons.Material.Rounded.Cancel" IconColor="Color.Error">Deletar</MudMenuItem>
                    </MudMenu>
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }
    else
    {
        <Loading />
    }

</MudPaper>

@code {

    private IEnumerable<ExperimentalModelDTO.View>? ExperimentalModels { get; set; }
    private bool Loading { get; set; } = true;
    private string SearchString { get; set; } = "";

    protected override void OnParametersSet()
    {
        Loading = true;

        if (authService.User is null) return;

        ExperimentalModels = experimentalModelService.GetExperimentalModelsByExperimenterId(authService.User.Id);

        Loading = false;
    }

    private async Task OpenModelAsync(string model)
    {
        await modalService
            .Optional()
            .ScreenSize()
            .ViewOnly()
            .DisplayViewAsync(model, "Modelo");
    }

    private bool FilterWrapper(ExperimentalModelDTO.View view) => Filter(view, SearchString);

    private bool Filter(ExperimentalModelDTO.View view, string searchString)
    {
        if (view is null) return false;
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (view.Name.Contains(SearchString)) return true;
        if (view.Model.Contains(SearchString)) return true;
        if (view.Description.Contains(SearchString)) return true;

        return false;
    }
}
