@page "/experimentalModel/index"
@inject ExperimentalModelService experimentalModelService
@inject AuthService authService
@inject IDialogService dialogService

<MudPaper Width="100%">
    @if (ExperimentalModels is not null)
    {
        <MudTable Items="@ExperimentalModels" 
            Hover="true" 
            Breakpoint="Breakpoint.Sm" 
            Loading="@Loading" 
            LoadingProgressColor="Color.Info">
            <HeaderContent>
                <MudTh><b>Id</b></MudTh>
                <MudTh><b>Nome</b></MudTh>
                <MudTh><b>Modelo</b></MudTh>
                <MudTh><b>Descrição</b></MudTh>
                <MudTh Style="text-align: center; width: 10%"><b>Ações</b></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id">@context.Id</MudTd>
                <MudTd DataLabel="Nome">@context.Name</MudTd>
                <MudTd DataLabel="Modelo">
                    <MudButton Variant="Variant.Text" 
                        Color="Color.Info" 
                        OnClick="@(() => OpenModelAsync(@context.Model))">Visualizar modelo</MudButton>
                </MudTd>
                <MudTd DataLabel="Descrição">@context.Description</MudTd>
                <MudTd DataLabel="Ações" Style="text-align: center">
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Primary" Size="Size.Medium"
                             AriaLabel="Abrir menu de ações">
                        <MudMenuItem Href="@($"/experimentalModel/view/view/{context.Id}")" 
                            Icon="@Icons.Material.Rounded.RemoveRedEye" IconColor="Color.Info" A>Visualizar</MudMenuItem>
                        <MudMenuItem Href="@($"/experimentalModel/view/edit/{context.Id}")"
                            Icon="@Icons.Material.Rounded.EditNote" IconColor="Color.Warning">Editar</MudMenuItem>
                        <MudMenuItem Href="@($"/experimentalModel/view/delete/{context.Id}")"
                            Icon="@Icons.Material.Rounded.Cancel" IconColor="Color.Error">Deletar</MudMenuItem>
                    </MudMenu>
                </MudTd>
            </RowTemplate>
        </MudTable>
    }
    else
    {
        <MudStack Row="true" Justify="Justify.Center">
            <MudProgressCircular Color="Color.Primary" Size="Size.Large" Class="mt-lg-12" Indeterminate="true" />
        </MudStack>
    }

</MudPaper>

@code {

    private IEnumerable<ExperimentalModelDTO.View>? ExperimentalModels { get; set; }
    private bool Loading { get; set; } = true;

    protected override void OnParametersSet()
    {
        Loading = true;

        if (authService.User is null) return;

        ExperimentalModels = experimentalModelService.GetExperimentalModelsByExperimenterId(authService.User.Id);

        Loading = false;
    }

    private async Task OpenModelAsync(string model)
    {
        var parameters = new DialogParameters<ModelDialog>
        {
            { x => x.ReadOnly, true },
            { x => x.Model, model },
        };

        var options = new DialogOptions() { FullWidth = true, MaxWidth = MaxWidth.Large, CloseOnEscapeKey = true };

        await dialogService.ShowAsync<ModelDialog>("", parameters, options);
    }
}
