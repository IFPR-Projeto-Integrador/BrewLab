@using BrewLab.Web.Extensions
@inject AuthService authService
@inject NavigationManager navigation

<CascadingValue Value="AuthenticationState">
    <CascadingAuthenticationState>
        <Router AppAssembly="typeof(Program).Assembly">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="routeData" DefaultLayout="typeof(Layout.MainLayout)" />
                <FocusOnNavigate RouteData="routeData" Selector="h1" />
            </Found>
        </Router>
    </CascadingAuthenticationState>
</CascadingValue>


@code {
    private AuthState AuthenticationState { get; set; } = new();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Authenticate();
        }
    }

    private async Task Authenticate()
    {
        var token = await authService.GetTokenLocalStorage();
        if (token is null)
        {
            await Reinitialize();
            return;
        }
        var user = await authService.Validate(token);
        if (user is null)
        {
            await Reinitialize();
            return;
        }

        AuthenticationState.HasAttemptedAuthentication = true;
        AuthenticationState.IsAuthenticated = true;

        navigation.ToReturnUrl();
    }

    private async Task Reinitialize()
    {
        await authService.DeleteTokenLocalStorage();
        AuthenticationState.HasAttemptedAuthentication = true;
        navigation.NavigateTo("/account/login");
    }

    public class AuthState
    {
        public bool HasAttemptedAuthentication { get; set; } = false;
        public bool IsAuthenticated { get; set; } = false;
    }
}
